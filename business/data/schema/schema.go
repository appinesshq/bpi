// Package schema provides schema support for the database.
package schema

import (
	"bytes"
	"context"
	"encoding/json"
	"regexp"
	"strings"
	"text/template"
	"time"

	"github.com/ardanlabs/graphql"
	"github.com/pkg/errors"
)

// document represents the schema for the project.
var _document = `
enum Role {
	ADMIN
	EMAIL
	MUTATE
	QUERY
}

type User @auth(
	query: { rule: "{$ROLE: { eq: \"ADMIN\" } }" },
	add: { rule: "{$ROLE: { eq: \"ADMIN\" } }" },
    update: { rule: "{$ROLE: { eq: \"ADMIN\" } }" },
    delete: { rule: "{$ROLE: { eq: \"ADMIN\" } }" },
){
	id: ID!
	email: String! @search(by: [exact])
	password: String!
	role: Role!
	profile: Profile
	date_created: DateTime!
	date_modified: DateTime!
}

type Profile {
	id: ID!
	handle: String! @search(by: [exact])
	screen_name: String! @search(by: [exact])
	user: User @hasInverse(field: profile)
}

# Dgraph.Authorization {"header":"X-Bpi-Auth", "namespace":"Auth", "algo":"RS256", "verificationkey":"{{.PublicKey}}"}
`

// type Country {
// 	id: ID!
// 	code: String!
// 	name: String!
// 	jurisdictions: [Jurisdiction] @hasInverse(field: country)
// }

// type Jurisdiction {
// 	id: ID!
// 	code: String!
// 	name: String!
// 	country: Country
// }

// TODO: Create BPI-AUTH tooling and generate new keys.

// AdminJWT represents a default ADMIN token to support testing.
// It's based on the private/public key provided and was generated by using
// the Bpi-Auth tooling. The Auth tooling needs this to manage users.
var AdminJWT = `eyJhbGciOiJSUzI1NiIsImtpZCI6IjU0YmIyMTY1LTcxZTEtNDFhNi1hZjNlLTdkYTRhMGUxZTJjMSIsInR5cCI6IkpXVCJ9.eyJBdXRoIjp7IlJPTEUiOiJBRE1JTiJ9LCJleHAiOjE2MjMzNDI3MTQsImlhdCI6MTU5MTgwNjcxNCwiaXNzIjoidHJhdmVsIHByb2plY3QiLCJzdWIiOiIweDUifQ.dxZsiE9WSXBHB-WenJlSK6zqgXs7ykKpQM3BfrTd_WYvfjIo26FhlPxN-Fr_3dR5-U4aMAw61dTNxMMBNPbD4qs8-CnJ0xfSOl8Xa5Y3p-aKpYvTPL_rPZdjcfqTua2t_sOPmZ3d8_VWkKWmdK-42ab751tmXOCrM6kYXoS1_APQwXKfE_q5eBUlTfrIBR29vtrBfWnpN54wR4i-Uk6DalMOduUmUNuZnYGP9ocIU4Ao1RQ8TsZjo6iIsLGM3r86KYypBWsiRAZPMIZjoZAxqhjRBEOaqNUpq6X3vdhQcRYLgh_36_R1QPlhofAaNKrTMvcZNHkBrBsjOB5pwf6IMQ`

// _publicKey represents the public key generated for the project for testing
// purposes. This is the same key found in the publickey.pem file in the root
// of the project. A new key can be generated with the Bpi-Auth tooling. In
// a production system this data should be embedded using a tool like pakcr from
// the Buffalo project (https://github.com/gobuffalo/packr).
var _publicKey = `-----BEGIN RSA PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnZ/BW/tuLr0uxZFw1Q5m
P1JpIksU46o+kIaqIXZjSAduma18m+oSgd1L19Fs9otAjfAlkyU8HF1hJNj/PVv8
MY72vhIWv60xBB4caXuLmflAiJEtvxHfw3WtVR9npQqEowcwrsf7MSSfdHwM4S+F
bMmcl/mE9c7DUrYJBUgu1IbdI7vrEoPE65GFafjZQHkPLUX8OaRXOt4rkT6HfYv+
XqaCs6Ie+dt6xL5HiQpO90/89CAJhi2q8AXvhfxqCVVfLxxd3jNJVq2olkCOLJRE
uJ29Bb460yKOAiDigEUobUpmvT6ggUZNrX71yP0GZxQFBhq9j1IRgPVg4CDA0Pw5
FQIDAQAB
-----END RSA PUBLIC KEY-----`

// document is a convenience variable for the schema and public key required for
// the project. This helps to support the testing and quick start to getting
// the project up and running.
var document = struct {
	publicKey string
	document  string
}{
	publicKey: _publicKey,
	document:  _document,
}

// Schema error variables.
var (
	ErrNoSchemaExists = errors.New("no schema exists")
	ErrInvalidSchema  = errors.New("schema doesn't match")
)

// Schema provides support for schema operations against the database.
type Schema struct {
	graphql  *graphql.GraphQL
	document string
}

// New constructs a Schema value for use to manage the schema.
func New(graphql *graphql.GraphQL) (*Schema, error) {

	// The actual CRLF (\n) must be converted to the characters '\n' so the
	// entire key sits on one line.
	publicKey := strings.ReplaceAll(document.publicKey, "\n", "\\n")

	// Create the final schema document with the variable replacments by
	// processing the template.
	tmpl := template.New("schema")
	if _, err := tmpl.Parse(document.document); err != nil {
		return nil, errors.Wrap(err, "parsing template")
	}
	var document bytes.Buffer
	vars := map[string]interface{}{
		"PublicKey": publicKey,
	}
	if err := tmpl.Execute(&document, vars); err != nil {
		return nil, errors.Wrap(err, "executing template")
	}

	schema := Schema{
		graphql:  graphql,
		document: document.String(),
	}

	return &schema, nil
}

// DropAll perform an alter operatation against the configured server
// to remove all the data and schema.
func (s *Schema) DropAll(ctx context.Context) error {
	query := strings.NewReader(`{"drop_all": true}`)
	if err := s.graphql.Do(ctx, "alter", query, nil); err != nil {
		return errors.Wrap(err, "dropping schema and data")
	}

	schema, err := s.retrieve(ctx)
	if err != nil {
		return errors.Wrap(err, "can't validate schema, db not ready")
	}

	if err := s.validate(ctx, schema); err != ErrNoSchemaExists {
		return errors.Wrap(err, "unable to drop schema and data")
	}

	return nil
}

// DropData perform an alter operatation against the configured server
// to remove all the data and schema.
func (s *Schema) DropData(ctx context.Context) error {
	query := strings.NewReader(`{"drop_op": "DATA"}`)
	if err := s.graphql.Do(ctx, "alter", query, nil); err != nil {
		return errors.Wrap(err, "dropping data")
	}

	return nil
}

// Create is used create the schema in the database.
func (s *Schema) Create(ctx context.Context) error {
	schema, err := s.retrieve(ctx)
	if err != nil {
		return errors.Wrap(err, "can't create schema, db not ready")
	}

	// If the schema matches against what we know the
	// schema to be, don't try to update it.
	if err := s.validate(ctx, schema); err == nil {
		return nil
	}

	query := `mutation updateGQLSchema($schema: String!) {
		updateGQLSchema(input: {
			set: { schema: $schema }
		}) {
			gqlSchema {
				schema
			}
		}
	}`
	vars := map[string]interface{}{"schema": s.document}

	if err := s.graphql.QueryWithVars(ctx, graphql.CmdAdmin, query, vars, nil); err != nil {
		return errors.Wrap(err, "create schema")
	}

	schema, err = s.retrieve(ctx)
	if err != nil {
		return errors.Wrap(err, "can't create schema, db not ready")
	}

	if err := s.validate(ctx, schema); err != nil {
		return errors.Wrap(err, "invalid schema")
	}

	return nil
}

// retrieve queries the database for the schema and handles situations
// when the database is not ready for schema operations.
func (s *Schema) retrieve(ctx context.Context) (string, error) {
	for {
		schema, err := s.query(ctx)
		if err != nil {
			if strings.Contains(err.Error(), "Server not ready") {

				// If the context deadline exceeded then we are done trying.
				if ctx.Err() != nil {
					return "", errors.Wrap(err, "server not ready")
				}

				// We need to wait for the server to be ready for this :(.
				time.Sleep(2 * time.Second)
				continue
			}

			return "", errors.Wrap(err, "server not ready")
		}

		return schema, nil
	}
}

func (s *Schema) query(ctx context.Context) (string, error) {
	query := `query { getGQLSchema { schema }}`
	result := make(map[string]interface{})
	if err := s.graphql.QueryWithVars(ctx, graphql.CmdAdmin, query, nil, &result); err != nil {
		return "", errors.Wrap(err, "query schema")
	}

	data, err := json.Marshal(result)
	if err != nil {
		return "", errors.Wrap(err, "marshal schema")
	}

	return string(data), nil
}

func (s *Schema) validate(ctx context.Context, schema string) error {
	if schema == `{"getGQLSchema":null}` || schema == `{"getGQLSchema":{"schema":""}}` {
		return ErrNoSchemaExists
	}

	if len(schema) < 27 {
		return ErrInvalidSchema
	}

	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		return errors.Wrap(err, "regex compile")
	}

	exp := strings.ReplaceAll(s.document, "\\n", "")
	exp = reg.ReplaceAllString(exp, "")
	schema = strings.ReplaceAll(schema[27:], "\\n", "")
	schema = strings.ReplaceAll(schema, "\\t", "")
	schema = reg.ReplaceAllString(schema, "")

	if exp != schema {
		return ErrInvalidSchema
	}

	return nil
}
